def print_tree(root, searched_node=None, prefix="", is_left=True):
    """
    Affiche l'arbre binaire de mani√®re hi√©rarchique en utilisant des symboles pour repr√©senter la structure de l'arbre.
    - üîç Le n≈ìud recherch√© est affich√© en bleu.

    :param root: La racine de l'arbre binaire.
    :param searched_node: L'adresse IP du n≈ìud recherch√©. Si ce n≈ìud est trouv√©, il sera affich√© en bleu.
    :param prefix: Le pr√©fixe pour structurer l'affichage (utilis√© pour les niveaux de l'arbre).
    :param is_left: Un indicateur pour savoir si le n≈ìud actuel est √† gauche dans l'arbre. Cela permet de formater correctement l'affichage.
    """
    
    # V√©rifier si le n≈ìud actuel est vide (None), ce qui signifie qu'il n'y a rien √† afficher.
    if root is None:
        return

    # üé® D√©finir des couleurs pour l'affichage dans le terminal.
    color_white = "\033[37m"  # Blanc : couleur pour les n≈ìuds non recherch√©s
    color_blue = "\033[94m"   # Bleu : couleur pour le n≈ìud recherch√©
    color_reset = "\033[0m"   # R√©initialiser la couleur apr√®s chaque n≈ìud

    # V√©rifier si le n≈ìud actuel est celui que nous recherchons.
    if searched_node and root.key == searched_node:
        # Si c'est le n≈ìud recherch√©, on l'affiche en bleu.
        node_label = f"{color_blue}{root.key}{color_reset}"
    else:
        # Sinon, on l'affiche en blanc (couleur par d√©faut).
        node_label = f"{color_white}{root.key}{color_reset}"

    # Affichage du n≈ìud avec son pr√©fixe (structure de l'arbre).
    # Le pr√©fixe change en fonction de l'emplacement du n≈ìud (gauche ou droite).
    print(prefix + ("‚îú‚îÄ‚îÄ " if is_left else "‚îî‚îÄ‚îÄ ") + node_label)

    # Pr√©parer le pr√©fixe pour les sous-arbres (gauche et droite).
    # Cela permet de maintenir la structure visuelle correcte pour l'affichage hi√©rarchique.
    new_prefix = prefix + ("‚îÇ   " if is_left else "    ")

    # Affichage r√©cursif des sous-arbres gauche et droit.
    # On applique la fonction de mani√®re r√©cursive pour chaque sous-arbre.
    # La fonction s'appelle elle-m√™me pour les enfants gauche et droit (left et right).
    # `True` pour la gauche (car un sous-arbre gauche commence avec un symbole sp√©cifique),
    # `False` pour la droite (un autre symbole).
    print_tree(root.left, searched_node, new_prefix, True)
    print_tree(root.right, searched_node, new_prefix, False)
